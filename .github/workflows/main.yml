name: Java Code Quality Report

on:
  push:
    branches:
      - main
    paths:
      - '**/*.java'
  pull_request:
    branches:
      - main
    paths:
      - '**/*.java'
  workflow_dispatch:   # Enables manual run from the Actions tab

jobs:
  quality-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Install Checkstyle
        run: |
          wget https://github.com/checkstyle/checkstyle/releases/download/checkstyle-8.45.1/checkstyle-8.45.1-all.jar -O checkstyle.jar
          wget https://raw.githubusercontent.com/checkstyle/checkstyle/checkstyle-8.45.1/src/main/resources/google_checks.xml -O checkstyle-config.xml

      - name: Run Checkstyle
        run: |
          java -jar checkstyle.jar -c checkstyle-config.xml -f plain -o checkstyle.txt $(find . -name "*.java") || echo "Checkstyle encountered errors." >> checkstyle.txt

      - name: Install SpotBugs
        run: |
          wget https://repo1.maven.org/maven2/com/github/spotbugs/spotbugs/4.5.0/spotbugs-4.5.0.tgz -O spotbugs.tgz
          tar -xzf spotbugs.tgz
          chmod +x ./spotbugs-4.5.0/bin/spotbugs
          rm spotbugs.tgz

      - name: Compile Java Files
        run: |
          find . -name "*.class" -delete
          javac $(find . -name "*.java") || echo "Compilation errors occurred." >> compilation_errors.txt

      - name: Run SpotBugs
        run: |
          ./spotbugs-4.5.0/bin/spotbugs -textui -output spotbugs.txt $(find . -name "*.class") || echo "SpotBugs encountered errors." >> spotbugs.txt

      - name: Calculate Code Quality Percentage
        id: quality
        run: |
          # Count Checkstyle violations
          total_checkstyle_lines=$(wc -l < checkstyle.txt || echo 0)
          total_checkstyle_violations=$(grep -c '^[0-9]' checkstyle.txt || echo 0)  # Count lines with line numbers as violations

          # Calculate Checkstyle quality percentage
          if [ "$total_checkstyle_lines" -gt 0 ]; then
            checkstyle_quality=$(echo "scale=2; (1 - ($total_checkstyle_violations / $total_checkstyle_lines)) * 100" | bc)
          else
            checkstyle_quality=100
          fi

          # Count SpotBugs violations
          total_spotbugs_violations=$(grep -c 'BugInstance' spotbugs.txt || echo 0)

          # Assuming the total lines as a fixed number for simplicity (can be customized)
          total_code_lines=$(find . -name "*.java" -exec wc -l {} + | awk '{sum += $1} END {print sum}')

          # Calculate an approximate overall quality percentage based on violations
          total_violations=$(($total_checkstyle_violations + $total_spotbugs_violations))
          if [ "$total_code_lines" -gt 0 ]; then
            overall_quality=$(echo "scale=2; (1 - ($total_violations / $total_code_lines)) * 100" | bc)
          else
            overall_quality=100
          fi

          # Log the quality scores
          echo "Checkstyle Quality Percentage: $checkstyle_quality"
          echo "SpotBugs Violations Count: $total_spotbugs_violations"
          echo "Overall Code Quality Percentage: $overall_quality"

          # Save to GitHub Actions outputs
          echo "::set-output name=checkstyle_quality::$checkstyle_quality"
          echo "::set-output name=overall_quality::$overall_quality"

          # Extract errors, warnings, and convention counts from Checkstyle report
          ERROR_COUNT=$(grep -c 'error' checkstyle.txt)
          WARNING_COUNT=$(grep -c 'warning' checkstyle.txt)
          CONVENTIONS_COUNT=$(grep -c 'style' checkstyle.txt)

          # Extract SpotBugs violations
          SPOTBUGS_COUNT=$total_spotbugs_violations

          # Calculate Logical Lines of Code (LLOC) as the sum of Checkstyle errors, warnings, conventions, and SpotBugs violations
          LLOC=$((ERROR_COUNT + WARNING_COUNT + CONVENTIONS_COUNT + SPOTBUGS_COUNT))

          # Calculate the quality score using the formula
          if [ "$LLOC" -eq 0 ]; then
            echo "No logical lines of code found. Setting quality score to 0."
            QUALITY_SCORE=0
          else
            QUALITY_SCORE=$(awk "BEGIN {printf \"%.2f\", 10.0 - ((5 * $ERROR_COUNT + $WARNING_COUNT + $CONVENTIONS_COUNT + $SPOTBUGS_COUNT) / $LLOC) * 10}")
          fi

          echo "Quality Score: $QUALITY_SCORE"
          echo "quality_score=$QUALITY_SCORE" >> $GITHUB_ENV

      - name: Consolidate Reports into a Single File
        run: |
          echo "<html><body><h1>Java Code Quality Report</h1>" > code-quality-report.html
          echo "<h2>Checkstyle Report</h2><pre>" >> code-quality-report.html
          cat checkstyle.txt >> code-quality-report.html
          
          echo "</pre><h2>Compilation Errors</h2><pre>" >> code-quality-report.html
          if [ -f compilation_errors.txt ]; then
            cat compilation_errors.txt >> code-quality-report.html
          else
            echo "No compilation errors." >> code-quality-report.html
          fi

          echo "</pre><h2>SpotBugs Report</h2><pre>" >> code-quality-report.html
          if [ -f spotbugs.txt ]; then
            cat spotbugs.txt >> code-quality-report.html
          else
            echo "No SpotBugs issues detected." >> code-quality-report.html
          fi
          
          echo "</pre><h2>Checkstyle Quality Percentage</h2><p>Checkstyle Quality: $checkstyle_quality%</p>" >> code-quality-report.html
          echo "</pre><h2>Overall Quality Score</h2><p>Overall Quality: $QUALITY_SCORE</p>" >> code-quality-report.html
          echo "</body></html>" >> code-quality-report.html

      - name: Move Report to Docs Folder
        run: |
          # Create a folder under docs/ for the report
          DOCS_FOLDER="docs/$USERNAME"
          mkdir -p "$DOCS_FOLDER"
          
          # Move the generated HTML report to the docs folder
          mv code-quality-report.html "$DOCS_FOLDER/"

      - name: Commit and Push Code Quality Report to GitHub Pages
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Add and commit the report in docs/
          git add docs/${{ github.event.inputs.custom_username || 'default-user' }}/
          git commit -m "Update Java Code Quality Report for ${{ github.event.inputs.custom_username || 'default-user' }}"

          # Push the changes to GitHub Pages
          git push https://x-access-token:${GH_PAT}@github.com/${{ github.repository }} main --force

      - name: Upload Consolidated Code Quality Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-report
          path: code-quality-report.html
      - name: Call API to Insert Quality Score
        run: |
         API_URL="https://dolphin-app-uzion.ondigitalocean.app/api/setQuality?clientpublic=baef7468287a44d8ac3634026d9fb8d1&clientsecret=181a2f3171117c1bd164c88b1171c1b83114fc1712121b12"
         USER_ID="Akasi.co"
         CLIENT_PUBLIC="baef7468287a44d8ac3634026d9fb8d1"
         CLIENT_SECRET="181a2f3171117c1bd164c88b1171c1b83114fc1712121b12"
         LAST_REQUEST_TIME="1733275263647"
         projectid="JAVA1080"

         curl -X POST "$API_URL" \
           -H "Content-Type: application/json" \
           -d "{
              \"userid\": \"$USER_ID\",
              \"clientpublic\": \"$CLIENT_PUBLIC\",
              \"clientsecret\": \"$CLIENT_SECRET\",
              \"projectid\": \"$projectid\",
              \"recordtime\": \"$LAST_REQUEST_TIME\",
            \"quality\": \"${{ env.quality_score }}\",
              \"coverage\": \"${{ env.quality_score }}\"
            }"
 
